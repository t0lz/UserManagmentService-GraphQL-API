# Система управления пользователями (GraphQL)

## Описание
Система управления пользователями предоставляет API для управления пользователями в приложениях. Реализовано с использованием Flask и GraphQL. Сервис включает в себя операции для создания, получения, обновления, удаления пользователей, а также аутентификацию с использованием JWT.

### Основные возможности:
- Создание нового пользователя с уникальным email.
- Получение информации о пользователе по ID.
- Обновление данных пользователя (имя, email, роль).
- Удаление пользователя по ID.
- Аутентификация пользователя с помощью токенов.
- Получение списка всех пользователей.

### Сценарий использования:
Система предназначена для приложений, которым необходимо управлять учетными записями пользователей. Это может быть полезно для веб-приложений, мобильных приложений или внутренних систем, которые требуют безопасного и эффективного управления пользователями.

## Требования
Для запуска проекта вам понадобятся:
- Python 3.8+
- Библиотеки:
  - Flask
  - graphene
  - requests
  - PyJWT

## Установка зависимостей
Перед запуском сервера установите все необходимые зависимости. Для этого создайте и установите зависимости через `requirements.txt`:

```bash
pip install -r requirements.txt
```

В файл `requirements.txt` добавьте следующие зависимости:

```
Flask==2.0.1
graphene==3.0
requests==2.26.0
PyJWT==2.3.0
```

## Запуск сервера
1. Убедитесь, что у вас установлен Python 3.8+.
2. Запустите сервер командой:

```bash
python server.py
```

Сервер будет доступен по адресу `http://localhost:5000`.

## Запуск клиента
После того как сервер запущен, можно запустить клиентский скрипт для тестирования всех функций:

```bash
python client.py
```

Этот скрипт выполнит несколько GraphQL-запросов для проверки работы сервиса.

## Структура проекта
- `server.py` — Реализация GraphQL-сервера на Flask с поддержкой аутентификации и операций над пользователями.
- `client.py` — Клиент для тестирования API сервера.
- `requirements.txt` — Список зависимостей для проекта.
- `users_db.py` — Модуль для хранения пользователей в памяти (или SQLite, если используется).

## Примеры запросов и ответов

### 1. Авторизация пользователя (Login)
**Запрос:**
```bash
POST /login
Content-Type: application/json
{
  "username": "admin",
  "password": "admin123"
}
```

**Ответ:**
```json
{
  "status": "SUCCESS",
  "token": "dummy-jwt-token",
  "message": "Авторизация прошла успешно"
}
```

### 2. Создание нового пользователя (CreateUser)
**Запрос:**
```graphql
mutation CreateUser($input: UserInput!) {
  createUser(input: $input) {
    user {
      id
      name
      email
    }
    status
    message
  }
}
```

**Переменные:**
```json
{
  "input": {
    "name": "Екатерина",
    "email": "kate@example.com",
    "role": "USER"
  }
}
```

**Ответ:**
```json
{
  "createUser": {
    "user": {
      "id": "3",
      "name": "Екатерина",
      "email": "kate@example.com"
    },
    "status": "SUCCESS",
    "message": "Пользователь успешно создан"
  }
}
```

### 3. Получение пользователя по ID (GetUser)
**Запрос:**
```graphql
query GetUser($id: ID!) {
  user(id: $id) {
    id
    name
    email
    role
  }
}
```

**Переменные:**
```json
{
  "id": "1"
}
```

**Ответ:**
```json
{
  "data": {
    "user": {
      "id": "1",
      "name": "Алиса",
      "email": "alice@example.com",
      "role": "ADMIN"
    }
  }
}
```

**Ошибки (несуществующий пользователь):**
```json
{
  "errors": [
    "Пользователь не найден"
  ],
  "status": "ERROR",
  "message": "Ошибка выполнения запроса"
}
```

### 4. Обновление данных пользователя (UpdateUser)
**Запрос:**
```graphql
mutation UpdateUser($id: ID!, $input: UserInput!) {
  updateUser(id: $id, input: $input) {
    user {
      id
      name
      email
    }
    status
    message
  }
}
```

**Переменные:**
```json
{
  "id": "1",
  "input": {
    "name": "Алиса (обновлено)",
    "email": "alice_new@example.com",
    "role": "ADMIN"
  }
}
```

**Ответ:**
```json
{
  "data": {
    "updateUser": {
      "user": {
        "id": "1",
        "name": "Алиса (обновлено)",
        "email": "alice_new@example.com"
      },
      "status": "SUCCESS",
      "message": "Данные пользователя обновлены"
    }
  }
}
```

### 5. Удаление пользователя (DeleteUser)
**Запрос:**
```graphql
mutation DeleteUser($id: ID!) {
  deleteUser(id: $id) {
    status
    message
  }
}
```

**Переменные:**
```json
{
  "id": "2"
}
```

**Ответ:**
```json
{
  "data": {
    "deleteUser": {
      "status": "SUCCESS",
      "message": "Пользователь удален"
    }
  }
}
```

### 6. Проверка удаления (GetAllUsers)
**Запрос:**
```graphql
query {
  users {
    id
    name
    email
    role
  }
}
```

**Ответ:**
```json
{
  "data": {
    "users": [
      {
        "id": "1",
        "name": "Алиса (обновлено)",
        "email": "alice_new@example.com",
        "role": "ADMIN"
      },
      {
        "id": "3",
        "name": "Екатерина",
        "email": "kate@example.com",
        "role": "USER"
      }
    ]
  }
}
```

## Описание механизма аутентификации
Аутентификация осуществляется через JWT (JSON Web Tokens). Для доступа к защищенным эндпоинтам необходимо сначала выполнить запрос на получение токена, который затем будет использоваться в заголовке авторизации для выполнения защищенных запросов.

### Пример аутентификации:
**Запрос на получение токена:**
- **Заголовок:** `Content-Type: application/json`
- **Тело запроса:**
```json
{
  "username": "admin",
  "password": "admin123"
}
```

**Ответ:**
- **Заголовок:** `Authorization: Bearer <JWT_TOKEN>`
- **Формат токена:**
```json
{
  "status": "SUCCESS",
  "token": "<JWT_TOKEN>",
  "message": "Авторизация прошла успешно"
}
```

После получения токена, его нужно передавать в заголовке каждого защищенного запроса:
```bash
Authorization: Bearer <JWT_TOKEN>
```

## Заключение
Этот сервис предоставляет эффективное решение для управления пользователями, позволяя создавать, обновлять и удалять пользователей через GraphQL API. Токены аутентификации гарантируют безопасный доступ к защищенным ресурсам.